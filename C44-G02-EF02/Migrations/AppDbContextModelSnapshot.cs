// <auto-generated />
using System;
using C44_G02_EF02.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace C44_G02_EF02.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("C44_G02_EF02.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Top_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Top_ID");

                    b.ToTable("Courses", (string)null);

                    b.HasCheckConstraint("CK_Topic_Duration", "Duration > 0");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Course_Inst", b =>
                {
                    b.Property<int>("Inst_ID")
                        .HasColumnType("int");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Evaluate")
                        .HasColumnType("int");

                    b.HasKey("Inst_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Instructor_Course", (string)null);

                    b.HasCheckConstraint("CK_Instructor_Course_Evaluate", "Evaluate BETWEEN 1 AND 10");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("HeadInstructorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("DATE");

                    b.Property<int?>("Ins_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("HeadInstructorID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments", (string)null);

                    b.HasCheckConstraint("CK_Department_HiringDate", "HiringDate <= GETDATE()");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Dept_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("HourRateBouns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.HasIndex("Dept_ID");

                    b.ToTable("Instructors", (string)null);

                    b.HasCheckConstraint("CK_Instructor_HourRateBouns", "HourRateBouns >= 0");

                    b.HasCheckConstraint("CK_Instructor_Salary", "Salary > 0");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Stud_Course", b =>
                {
                    b.Property<int>("Stud_ID")
                        .HasColumnType("int");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.HasKey("Stud_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Stud_Course", (string)null);

                    b.HasCheckConstraint("CK_Stud_Course_Grade", "Grade BETWEEN 0 AND 100");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Course", b =>
                {
                    b.HasOne("C44_G02_EF02.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("Top_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Course_Inst", b =>
                {
                    b.HasOne("C44_G02_EF02.Models.Course", "Course")
                        .WithMany("Course_Inst")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C44_G02_EF02.Models.Instructor", "Instructor")
                        .WithMany("Course_Inst")
                        .HasForeignKey("Inst_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Department", b =>
                {
                    b.HasOne("C44_G02_EF02.Models.Instructor", "HeadInstructor")
                        .WithMany()
                        .HasForeignKey("HeadInstructorID");

                    b.Navigation("HeadInstructor");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Instructor", b =>
                {
                    b.HasOne("C44_G02_EF02.Models.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("Dept_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Stud_Course", b =>
                {
                    b.HasOne("C44_G02_EF02.Models.Course", "Course")
                        .WithMany("Stud_Courses")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("C44_G02_EF02.Models.Student", "Student")
                        .WithMany("Stud_Courses")
                        .HasForeignKey("Stud_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Student", b =>
                {
                    b.HasOne("C44_G02_EF02.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Course", b =>
                {
                    b.Navigation("Course_Inst");

                    b.Navigation("Stud_Courses");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Instructor", b =>
                {
                    b.Navigation("Course_Inst");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Student", b =>
                {
                    b.Navigation("Stud_Courses");
                });

            modelBuilder.Entity("C44_G02_EF02.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
